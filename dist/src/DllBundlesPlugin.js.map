{"version":3,"file":"DllBundlesPlugin.js","sourceRoot":"","sources":["../../src/DllBundlesPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["const DllPlugin = require('webpack/lib/DllPlugin');\nconst DllReferencePlugin = require('webpack/lib/DllReferencePlugin');\n\nimport * as Path from 'path';\nimport * as fs from 'fs';\n\nimport { runWebpack } from './utils';\n\nimport { DllBundlesPluginOptions, DllBundleConfig } from './interfaces';\nimport { DllBundlesControl } from './DllBundlesControl';\n\nexport class DllBundlesPlugin {\n  private compiler: any;\n  private bundles: DllBundleConfig[];\n  private bundleControl: DllBundlesControl;\n  private options: DllBundlesPluginOptions;\n\n  constructor(options: DllBundlesPluginOptions) {\n    this.setOptions(options);\n  }\n\n  apply(compiler: any) {\n    this.compiler = compiler;\n\n    compiler.plugin('run', (compiler, next) => this.run(next) );\n    compiler.plugin('watch-run', (compiler, next) => this.run(next) );\n  }\n\n  applyPlugins() {\n    const {context} = this.options;\n\n    const newPlugins = this.bundles.map(bundle => {\n      const manifestPath = Path.join(this.options.dllDir, `${bundle.name}-manifest.json`);\n\n      if (fs.existsSync(manifestPath)) {\n        return new DllReferencePlugin({ manifest: require(manifestPath), context });\n      }\n    });\n\n    newPlugins.forEach(plugin => plugin.apply(this.compiler));\n    this.compiler.options.plugins.push(...newPlugins);\n  }\n\n  run(next: (err?: Error) => any): void {\n    console.info('DLL: Checking if DLLs are valid.');\n\n    this.bundleControl.checkBundles()\n      .then( bundles => {\n        if (bundles.length === 0) {\n          this.applyPlugins();\n          return console.info('DLL: All DLLs are valid.');\n        } else {\n          console.info('DLL: Rebuilding...');\n\n          const newEntry = this.bundles.reduce( (prev, curr) => {\n            prev[curr.name] = curr.packages.map( p => typeof p === 'string' ? p : p.path );\n            return prev;\n          }, {} as any);\n\n          const webpackConfig = Object.assign({}, this.options.webpackConfig, {\n            entry: newEntry,\n            watch: true,\n            output: {\n              path: this.options.dllDir,\n              filename: '[name].dll.js',\n              library: '[name]_lib'\n            },\n          });\n\n\n          if (!webpackConfig.plugins) {\n            webpackConfig.plugins = [];\n          }\n\n          webpackConfig.plugins.push(new DllPlugin({\n            path: Path.join(this.options.dllDir, '[name]-manifest.json'),\n            name: '[name]_lib',\n            context: this.options.context\n          }));\n\n          return runWebpack(webpackConfig).done\n            .then( stats => this.bundleControl.saveBundleState() )\n            .then( () => {\n              this.applyPlugins();\n              console.info('DLL: Bundling done, all DLLs are valid.');\n            });\n        }\n      })\n      .then( () => next() )\n      .catch( err => next(err) );\n  }\n\n  private setOptions(options: DllBundlesPluginOptions): void {\n    this.options = Object.assign({}, options);\n\n    if (!this.options.context) {\n      this.options.context = process.cwd();\n    }\n\n    if (!Path.isAbsolute(this.options.context)) {\n      throw new Error('Context must be an absolute path');\n    }\n\n    if (!Path.isAbsolute(this.options.dllDir)) {\n      this.options.dllDir = Path.resolve(this.options.context, this.options.dllDir);\n    }\n\n    const bundles = this.options.bundles;\n    this.bundles = Object.keys(bundles).map( k => ({ name: k, packages: bundles[k] }) );\n\n    this.bundleControl = new DllBundlesControl(this.bundles, this.options);\n  }\n\n  static resolveFile(bundleName: string): string {\n    return `${bundleName}.dll.js`;\n  }\n}\n"]}